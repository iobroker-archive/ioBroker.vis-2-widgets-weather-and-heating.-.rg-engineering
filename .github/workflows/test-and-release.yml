name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - '*'
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:

# Performs quick checks before the expensive test runs
  check-and-lint:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    steps:
      - uses: ioBroker/testing-action-check@v1
        with:
          node-version: '22.x'
          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
          # install-command: 'npm install'
          lint: true


  # Runs adapter tests on all supported node versions and OSes
  adapter-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest

    #runs-on: ${{ matrix.os }}
    #strategy:
    #  matrix:
    #    node-version: [ 20.x, 22.x, 24.x ]
    #    os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: npm i -f

      - name: Build
        run: npm run build
        env:
            CI: ""

      - name: Run local tests
        run: npm test

      - name: Archive screenshots
        if: always()
        # if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: tmp/screenshots/**/*.png
          retention-days: 3

  # Deploys the final package to NPM
  deploy:
    needs: [check-and-lint, adapter-tests]

    # Trigger this step only when a commit on any branch is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    runs-on: ubuntu-latest

    # Write permissions are required to create Github releases
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: ioBroker/testing-action-deploy@v1
        with:
          node-version: '22.x'
          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
          # install-command: 'npm install'
          #npm-token: ${{ secrets.NPM_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

          
          # When using Sentry for error reporting, Sentry can be informed about new releases
          # To enable create a API-Token in Sentry (User settings, API keys)
          # Enter this token as a GitHub secret (with name SENTRY_AUTH_TOKEN) in the repository options
          # Then uncomment and customize the following block:
        
          #sentry nicht n√∂tig, kein projekt dort
          #sentry: true
          #sentry-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          #sentry-org: "rg-engineering"
          #sentry-url: "https://sentry.io"
          #sentry-project: "iobroker_vis-vis-2-widgets-weather-and-heating"
          #sentry-version-prefix: "iobroker.vis-2-widgets-weather-and-heating"
          #sentry-sourcemap-paths: "build/ admin/build/"
          ## If your sentry project is linked to a GitHub repository, you can enable the following option
          #sentry-github-integration: true

    

     
